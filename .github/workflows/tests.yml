name: Test Suite

# Run tests on push and pull requests
on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'docs/**'
      - 'review/**'
  pull_request:
    branches:
      - main
      - develop

# Allow manual workflow runs
  workflow_dispatch:

jobs:
  # Job 1: Detect Change Type
  detect-changes:
    name: Detect Change Type
    runs-on: ubuntu-latest
    outputs:
      has-code-changes: ${{ steps.changes.outputs.code }}
      has-docs-changes: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        id: changes
        run: |
          # Check if there are any shell script changes
          if git diff --name-only origin/develop...HEAD | grep -E '\.(sh|bash)$' | grep -v '^\.githooks' | grep -v '^docs/'; then
            echo "code=true" >> $GITHUB_OUTPUT
          else
            echo "code=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if there are documentation changes
          if git diff --name-only origin/develop...HEAD | grep -E '\.(md|yml|yaml)$|^\.github|^\.githooks|^docs/'; then
            echo "docs=true" >> $GITHUB_OUTPUT
          else
            echo "docs=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: ShellCheck Linting
  shellcheck:
    name: ShellCheck Linting
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run always for code changes, optionally for docs
    if: needs.detect-changes.outputs.has-code-changes == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install ShellCheck
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq shellcheck
          shellcheck --version
      
      - name: Run ShellCheck on scripts
        run: |
          # Check all .sh files in scripts/
          echo "🔍 Checking shell scripts..."
          find scripts -name "*.sh" -type f -print0 | \
            xargs -0 shellcheck --severity=warning --format=gcc || true
      
      - name: Run ShellCheck (strict) on main scripts
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          # Stricter checks for main/develop
          find scripts -name "*.sh" -type f \
            -not -path "scripts/tests/*" \
            -print0 | \
            xargs -0 shellcheck --severity=style --format=gcc

  # Job 3: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run always for code changes, skip for docs-only
    if: needs.detect-changes.outputs.has-code-changes == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq curl ca-certificates unzip bc jq
      
      - name: Run unit tests
        run: |
          cd scripts
          bash run-tests.sh --unit || echo "::warning::Unit tests failed but continuing"
      
      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: scripts/tests/test-results/
          retention-days: 30

  # Job 4: Integration Tests (Optional - Podman required)
  integration-tests:
    name: Integration Tests (Podman)
    runs-on: ubuntu-latest
    needs: detect-changes
    # Only run for code changes and when explicitly requested
    if: |
      (needs.detect-changes.outputs.has-code-changes == 'true' && 
       github.event_name == 'push' && 
       (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      github.event_name == 'workflow_dispatch'
    continue-on-error: true  # Don't fail the workflow if Podman tests fail
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Podman
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq podman || echo "::warning::Podman installation failed"
          podman --version || echo "::warning::Podman not available"
      
      - name: Run integration tests
        run: |
          cd scripts
          if command -v podman &> /dev/null; then
            bash run-tests.sh --integration || echo "::warning::Integration tests failed"
          else
            echo "::warning::Podman not available, skipping integration tests"
          fi
      
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: scripts/tests/test-results/
          retention-days: 30

  # Job 5: Documentation Validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: detect-changes
    # Always run for docs changes
    if: needs.detect-changes.outputs.has-docs-changes == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Verify documentation files
        run: |
          echo "📚 Checking documentation files..."
          
          # Check that key documentation exists
          for file in README.md ARCHITECTURE.md DEVELOPER_WORKFLOW.md; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing"
              exit 1
            fi
          done
      
      - name: Check markdown formatting
        run: |
          echo "🔍 Checking markdown files..."
          # Basic checks for common markdown issues
          find . -name "*.md" -type f | while read -r file; do
            # Check for very long lines (>500 chars, which might be accidental)
            if grep -nE '^.{500,}$' "$file" > /dev/null; then
              echo "::warning file=$file::Contains very long lines"
            fi
            echo "✓ Checked $file"
          done
      
      - name: Verify configuration files
        run: |
          echo "⚙️ Checking configuration files..."
          
          # Check YAML syntax if files exist
          if [ -f ".github/workflows/tests.yml" ]; then
            echo "✓ CI/CD workflow file exists"
          fi
          
          if [ -f ".gitignore" ]; then
            echo "✓ .gitignore exists"
          fi

  # Job 6: Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, shellcheck, unit-tests, integration-tests, docs-validation]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🎯 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Change detection
          echo "### 📊 Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "- Code changes: ${{ needs.detect-changes.outputs.has-code-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation changes: ${{ needs.detect-changes.outputs.has-docs-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job results
          echo "### ✅ Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- ShellCheck: ${{ needs.shellcheck.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result || 'skipped' }} (optional)" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.docs-validation.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.docs-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.shellcheck.result }}" == "failure" ]] || \
             [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "### ❌ Required checks failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ All required checks passed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Note: Integration tests are optional and don't block merges." >> $GITHUB_STEP_SUMMARY
          fi
