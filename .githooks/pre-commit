#!/bin/bash
#
# QX Project Pre-Commit Hook
# 
# This hook runs before each commit to ensure code quality.
# To install: ln -s ../../.githooks/pre-commit .git/hooks/pre-commit
#
# To bypass (not recommended): git commit --no-verify
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}🔍 Running pre-commit checks...${NC}"
echo ""

# Get the list of staged shell scripts
STAGED_SH_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.sh$' || true)

if [ -z "$STAGED_SH_FILES" ]; then
    echo -e "${GREEN}✅ No shell scripts staged, skipping checks${NC}"
    exit 0
fi

echo "Checking files:"
echo "$STAGED_SH_FILES" | sed 's/^/  - /'
echo ""

# Check 1: Syntax check
echo -e "${YELLOW}→ Running bash syntax check...${NC}"
SYNTAX_ERRORS=0
for file in $STAGED_SH_FILES; do
    if [ -f "$file" ]; then
        if ! bash -n "$file" 2>/dev/null; then
            echo -e "${RED}  ✗ Syntax error in: $file${NC}"
            SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
        fi
    fi
done

if [ $SYNTAX_ERRORS -gt 0 ]; then
    echo -e "${RED}❌ Syntax check failed!${NC}"
    exit 1
fi
echo -e "${GREEN}  ✓ Syntax check passed${NC}"
echo ""

# Check 2: ShellCheck (if available)
if command -v shellcheck &> /dev/null; then
    echo -e "${YELLOW}→ Running ShellCheck...${NC}"
    SHELLCHECK_ERRORS=0
    for file in $STAGED_SH_FILES; do
        if [ -f "$file" ]; then
            if ! shellcheck "$file" --severity=warning; then
                SHELLCHECK_ERRORS=$((SHELLCHECK_ERRORS + 1))
            fi
        fi
    done
    
    if [ $SHELLCHECK_ERRORS -gt 0 ]; then
        echo -e "${RED}❌ ShellCheck found issues!${NC}"
        echo -e "${YELLOW}Fix the issues above or use 'git commit --no-verify' to bypass (not recommended)${NC}"
        exit 1
    fi
    echo -e "${GREEN}  ✓ ShellCheck passed${NC}"
else
    echo -e "${YELLOW}  ⚠ ShellCheck not installed, skipping${NC}"
    echo -e "${YELLOW}    Install with: sudo apt-get install shellcheck${NC}"
fi
echo ""

# Check 3: Run unit tests (only if test files changed or lib files changed)
CHANGED_LIB_FILES=$(echo "$STAGED_SH_FILES" | grep 'scripts/lib/' || true)
CHANGED_TEST_FILES=$(echo "$STAGED_SH_FILES" | grep 'scripts/tests/' || true)
CHANGED_PLUGIN_FILES=$(echo "$STAGED_SH_FILES" | grep 'scripts/plugins/' || true)

if [ -n "$CHANGED_LIB_FILES" ] || [ -n "$CHANGED_TEST_FILES" ] || [ -n "$CHANGED_PLUGIN_FILES" ]; then
    echo -e "${YELLOW}→ Running unit tests (code changes detected)...${NC}"
    
    if [ -f "scripts/run-tests.sh" ]; then
        if bash scripts/run-tests.sh --unit 2>&1 | tee /tmp/pre-commit-test.log | grep -q "PASSED"; then
            echo -e "${GREEN}  ✓ Unit tests passed${NC}"
        else
            echo -e "${RED}❌ Unit tests failed!${NC}"
            echo -e "${YELLOW}Check /tmp/pre-commit-test.log for details${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}  ⚠ Test runner not found, skipping tests${NC}"
    fi
else
    echo -e "${GREEN}✅ No code changes, skipping tests${NC}"
fi
echo ""

# Check 4: Check for common issues
echo -e "${YELLOW}→ Checking for common issues...${NC}"

ISSUES_FOUND=0

# Check for TODO/FIXME comments in staged files
TODO_COUNT=$(git diff --cached | grep -c "^+.*\(TODO\|FIXME\)" || true)
if [ "$TODO_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}  ⚠ Found $TODO_COUNT new TODO/FIXME comments${NC}"
    git diff --cached | grep "^+.*\(TODO\|FIXME\)" | head -5
fi

# Check for debug statements
DEBUG_COUNT=$(echo "$STAGED_SH_FILES" | xargs grep -n "set -x\|set +x" 2>/dev/null | wc -l || true)
if [ "$DEBUG_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}  ⚠ Warning: Found debug statements (set -x)${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check for hardcoded passwords/secrets (basic check)
if echo "$STAGED_SH_FILES" | xargs grep -i "password=\|secret=\|api_key=" 2>/dev/null | grep -v "# Example\|# TODO" > /dev/null; then
    echo -e "${RED}  ✗ Possible hardcoded secrets detected!${NC}"
    echo "$STAGED_SH_FILES" | xargs grep -n -i "password=\|secret=\|api_key=" 2>/dev/null | grep -v "# Example\|# TODO"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check for trailing whitespace
TRAILING_WS=$(git diff --cached --check 2>&1 | grep "trailing whitespace" || true)
if [ -n "$TRAILING_WS" ]; then
    echo -e "${YELLOW}  ⚠ Warning: Trailing whitespace found${NC}"
    echo "$TRAILING_WS" | head -5
fi

if [ $ISSUES_FOUND -eq 0 ]; then
    echo -e "${GREEN}  ✓ No common issues found${NC}"
fi
echo ""

# Check 5: Verify commit message format (if .git/COMMIT_EDITMSG exists)
# This runs during commit, so we check the message format
if [ -f ".git/COMMIT_EDITMSG" ]; then
    COMMIT_MSG=$(head -n1 .git/COMMIT_EDITMSG)
    
    # Check for conventional commit format: type(scope): subject
    if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
        echo -e "${YELLOW}  ⚠ Commit message doesn't follow conventional commit format${NC}"
        echo -e "${YELLOW}    Expected: type(scope): subject${NC}"
        echo -e "${YELLOW}    Example: feat(plugins): add PostgreSQL support${NC}"
        echo -e "${YELLOW}    Current: $COMMIT_MSG${NC}"
        echo ""
        echo -e "${YELLOW}    Valid types: feat, fix, docs, style, refactor, test, chore${NC}"
        echo ""
        # Don't fail, just warn
    fi
fi

# Summary
echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
echo ""
exit 0
